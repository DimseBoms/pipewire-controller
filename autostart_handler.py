import os
import traceback


class AutostartHandler:
    """Handles logic for creation and deletion of autostart entry"""
    def __init__(self):
        # Set up directories and file paths for autostart functionality
        self.home_dir = os.path.expanduser('~')
        self.autostart_dir = f'{self.home_dir}/.config/autostart/'
        self.config_dir = f'{self.home_dir}/.config/pipewire-control/'

        self.autostart_file = ''
        self.autostart_script = ''

        # Only set file paths if there is a home directory
        if self.home_dir:
            self.autostart_file = f'{self.autostart_dir}pipewire-control.desktop'
            self.autostart_script = f'{self.config_dir}pipewire-control.sh'

    def create_autostart_entry(self, buffer, samples):
        """Write file to local user autostart directory and set as executable"""
        if not self.autostart_dir:
            return

        try:
            # Create config directory and autostart script
            os.makedirs(self.config_dir, exist_ok=True)
            with open(self.autostart_script, 'w') as script_file:
                script_file.write(self.generate_autostart_script_content(buffer, samples))
            os.system(f'chmod +x {self.autostart_script}')
            
            # Create autostart file
            os.makedirs(self.autostart_dir, exist_ok=True)
            with open(self.autostart_file, 'w') as autostart_file:
                autostart_file.write(self.generate_autostart_file_content())
            
            print(f'Created autostart entry: {self.autostart_file}')
            print(f'Autostart script: {self.autostart_script}')
            
        except Exception as e:
            traceback.print_exc()
            print(f'Could not create autostart entry at: {self.autostart_dir}')

    def remove_autostart_entry(self):
            """Delete autostart entry and startup script"""
            try:
                if os.path.exists(self.autostart_file):
                    os.remove(self.autostart_file)
                    print(f'Removed autostart entry: {self.autostart_file}')

                if os.path.exists(self.autostart_script):
                    os.remove(self.autostart_script)
                    print(f'Removed autostart script: {self.autostart_script}')

            except FileNotFoundError:
                print('No autostart entry found')
            except Exception as e:
                traceback.print_exc()
                print(f'Could not remove: {self.autostart_file}')

    def generate_autostart_script_content(self, buffer, samples):
        """Construct content of autostart script file"""
        return f"""#!/bin/sh

# Set pipewire settings on login.
# Generated by pipewire-control.py

# buffer size
pw-metadata -n settings 0 clock.force-quantum {buffer}
# sample rate
pw-metadata -n settings 0 clock.force-rate {samples}
"""
    
    def generate_autostart_file_content(self):
        """Construct content of autostart desktop file"""
        return f"""[Desktop Entry]
Type=Application
Exec={self.autostart_script}
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[en_US]=Pipewire Control Autostart
Comment[en_US]=Persist pipewire settings accross reboots
"""

    def get_autostart_buffer(self):
        """Fetch configured buffer from autostart startup script"""
        return self._get_setting_value('clock.force-quantum')

    def get_autostart_samples(self):
        """Fetch configured samples from autostart startup script"""
        return self._get_setting_value('clock.force-rate')

    def _get_setting_value(self, setting_name):
        """Fetch the configured value for a specific setting from the autostart startup script"""
        try:
            with open(self.autostart_script, 'r') as f:
                content = f.read()
                lines = content.split('\n')
                for line in lines:
                    if line.startswith(f'pw-metadata -n settings 0 {setting_name}'):
                        return line.split()[-1]
            return None
        except FileNotFoundError:
            return None
        except Exception as e:
            traceback.print_exc()
            print(f'Could not read startup script: {self.autostart_script}')
            return None
        
    def get_autostart_status(self):
        """Returns True if autostart entry and startup script exist"""
        return os.path.isfile(self.autostart_file) and os.path.isfile(self.autostart_script)
